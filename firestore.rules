rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Expenses collection
    match /expenses/{expenseId} {
      // Allow read if the user is the owner
      allow read: if isAuthenticated() && 
                     resource.data.userId == request.auth.uid;
      
      // Allow create if user is authenticated and userId matches
      allow create: if isAuthenticated() && 
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.keys().hasAll(['vendor', 'amount', 'date', 'category', 'userId']) &&
                       request.resource.data.amount is number &&
                       request.resource.data.amount > 0;
      
      // Allow update if user is the owner
      allow update: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid &&
                       request.resource.data.userId == request.auth.uid;
      
      // Allow delete if user is the owner
      allow delete: if isAuthenticated() && 
                       resource.data.userId == request.auth.uid;
    }
    
    // User profiles collection (for future use)
    match /users/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if false; // Never allow deletion
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
